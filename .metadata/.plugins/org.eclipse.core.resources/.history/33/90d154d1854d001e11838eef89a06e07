package com.msb.lrg.ds.tree;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

import com.msb.lrg.ds.Node;
import com.msb.lrg.ds.Utility;

public class BiTreeSpiralTrav {

	public static void main(String[] args) {
		Node root =  BiTreeSpiralTrav.createTree();
		Utility.printBinaryTree(root);
		
        System.out.println("O/P : ");
        BiTreeSpiralTrav.printSpiralTrav(root);
	}
	
	public static void printSpiralTrav(Node root) {
		if(root == null)
			return;
		
		Queue<Node> stack = new Stack<Node>();
		Queue<Node> queue = new LinkedList<Node>();
		queue.add(root);
		queue.add(null);
		
		while(queue.size() > 1) {
			Node curr = queue.poll();
			if(curr == null) {
				queue.add(null);
				System.out.println("");
				continue;
			}
			System.out.printf("%4s", curr.data);
			if(curr.left != null)
				queue.add(curr.left);
			if(curr.right != null)
				queue.add(curr.right);
		}
	}

	public static Node createTree() {
		Node root = new Node(1);
		Node temp = null;
		
		temp = new Node(2);
		root.left = temp;
		temp = new Node(3);
		root.right = temp;

		temp = new Node(4);
		root.left.left = temp;
		temp = new Node(5);
		root.left.right = temp;
		temp = new Node(6);
		root.right.left = temp;
		temp = new Node(7);
		root.right.right = temp;

		return root;
	}
	
}
