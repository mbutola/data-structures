package com.msb.lrg.ds.dp;

public class ZeroOneKnapsackDp {

	public static void main(String[] args) {
		int[] val = new int[] {10,40,30,50};
		int[] wt = new int[] {5,4,6,3};
		int W = 10;
		System.out.println("O/P : " + ZeroOneKnapsackDp.knapSack(val, wt, W, wt.length));
	}
	
	public static int knapSack(int[] val, int[] wt, int W, int n) {
		
//		if(W == 0 || n == 0)
//			return 0;
//		
//		if(wt[n-1] > W) {
//			return knapSack(val, wt, W, n-1);
//		}else {
//			return Math.max(val[n-1] + knapSack(val, wt, W-wt[n-1], n-1),
//								knapSack(val, wt, W, n-1));
//		}
		
		int dp[][] = new int[n+1][W+1];
		
		for (int i=0; i<=W; i++) {
			dp[0][i] = 0;
		}
		
		for (int i=0; i<=n; i++) {
			dp[i][0] = 0;
		}
		
		for (int i = 1; i < n; i++) {
			for (int j = 1; j < W; j++) {
				if(val[j-1] > i) {
					dp[i][j] = dp[i][j-1];
				}else {
					if(W-wt[i-1] >=0)
						dp[i][j] = Math.max(dp[i-1][j], 1+ dp[i-1][W-wt[i]]);
				}
			}
		}
		
		return dp[n][W];
	}

}
