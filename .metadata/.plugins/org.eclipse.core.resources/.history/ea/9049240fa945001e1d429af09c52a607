package com.msb.lrg.ds.dp;

public class AllocPageDP {

	public static void main(String[] args) {
		int[] pages = new int[] {10,5,30,1,2,5,10,10};
		int k = 3;
		System.out.println("O/P : " + AllocPageDP.allocPage(pages, pages.length, k));
	}

	public static int allocPage(int[] pages, int n, int k) {
		
		int[][] dp = new int[n][n];
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				dp[i][j] = -1;
			}
		}
		
		for (int i = 0; i < n-1; i++) {
			dp[i][i+1] = 0;
		}

		for (int gap = 2; gap < n; gap++) {
			for (int i = 0; i+gap < n; i++) {
				int j = i+gap;
				dp[i][j] = Integer.MAX_VALUE;
				for (int k = i+1; k < j; k++) {
					dp[i][j] = Math.min(dp[i][j], 
										dp[i][k]
											+ dp[k][j]
											+ mat[i]*mat[k]*mat[j]);
				}
			}
		}
		
		Utility.printDp(Utility.getList(n), Utility.getList(n), dp);
		return dp[0][n-1];
		
	}
}
