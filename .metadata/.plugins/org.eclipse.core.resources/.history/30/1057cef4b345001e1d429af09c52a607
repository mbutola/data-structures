package com.msb.lrg.ds.dp;

public class AllocPageDP {

	public static void main(String[] args) {
		int[] pages = new int[] {10,20,30,40};
		int k = 2;
		System.out.println("O/P : " + AllocPageDP.allocPage(pages, k));
	}

	public static int allocPage(int[] pages, int st) {
		
		int n = pages.length;
		int[][] dp = new int[st+1][n+1];
		
		for (int i = 0; i < n; i++) {
			dp[1][i+1] = Utility.sumPages(pages, 0, i);
		}

		for (int i = 2; i <= st; i++) {
			dp[i][1] = pages[0];
		}

		for (int i = 2; i <=st; i++) {
			for (int j = 2; j <=n ; j++) {
				dp[i][j] = Integer.MAX_VALUE;
				for (int k = 1; k < j; k++) {
					dp[i][j] = Math.min(dp[i][j], Math.max(dp[i-1][k],
														Utility.sumPages(pages, k, j-1)));
				}
			}
		}
		
		Utility.printDp(Utility.getList(n), Utility.getList(n), dp);
		return dp[st][n];
		
	}
}
