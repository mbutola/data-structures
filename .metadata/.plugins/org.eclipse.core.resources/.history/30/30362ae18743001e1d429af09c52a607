package com.msb.defaultmethods;

import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

public class StandardDeck implements Deck {
	
	private List<Card> entireDeck;
	
	public static void main(String[] args) {
		
		StandardDeck deck = new StandardDeck();
		deck.setEntireDeck(populateEntireDeck());
		deck.printEntireDeck();

		System.out.println("Suit :: Rank");
		deck.sort();
		deck.printEntireDeck();

		System.out.println("Rank :: Suit");
		deck.sort(new SortByRankThenSuit());
		deck.printEntireDeck();

		System.out.println("Suit");
		deck.sort((first,second) -> first.getSuit().value() - second.getSuit().value());
		deck.printEntireDeck();

		System.out.println("Rank");
		deck.sort((first,second) -> first.getRank().value() - second.getRank().value());
		deck.printEntireDeck();

		System.out.println("Suit");
		deck.sort(Comparator
				.comparing(Card::getSuit));
		deck.printEntireDeck();

		System.out.println("Rank");
		deck.sort(Comparator
				.comparing(Card::getRank));
		deck.printEntireDeck();
		
		System.out.println("Suit and Rank");
		deck.sort(Comparator
				.comparing(Card::getSuit)
				.thenComparing(Card::getRank));
		deck.printEntireDeck();

		System.out.println("Rank reversed and Suit");
		deck.sort(Comparator
				.comparing(Card::getRank)
				.reversed()
				.thenComparing(Card::getSuit));
		deck.printEntireDeck();
		
	}

	@Override
	public void sort() {
		Collections.sort(entireDeck);
	}

	@Override
	public void sort(Comparator<Card> c) {
		Collections.sort(entireDeck, c);
	}

	private void printEntireDeck() {
		entireDeck.forEach(System.out::println);
	}
	
	public void setEntireDeck(List<Card> entireDeck) {
		this.entireDeck = entireDeck;
	}

	private static List<Card> populateEntireDeck() {

		return Arrays.asList(
					new PlayingCard(Card.Suit.SPADES, Card.Rank.DEUCE),
					new PlayingCard(Card.Suit.HEARTS, Card.Rank.DEUCE),
					new PlayingCard(Card.Suit.CLUBS, Card.Rank.DEUCE),
					new PlayingCard(Card.Suit.DIAMONDS, Card.Rank.DEUCE),
					new PlayingCard(Card.Suit.SPADES, Card.Rank.TEN),
					new PlayingCard(Card.Suit.HEARTS, Card.Rank.TEN),
					new PlayingCard(Card.Suit.CLUBS, Card.Rank.TEN),
					new PlayingCard(Card.Suit.DIAMONDS, Card.Rank.TEN)
				);
	}
	
	@Override
	public List<Card> getCards() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Deck deckFactory() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void addCard(Card card) {
		// TODO Auto-generated method stub

	}

	@Override
	public void addCards(List<Card> cards) {
		// TODO Auto-generated method stub

	}

	@Override
	public void addDeck(Deck deck) {
		// TODO Auto-generated method stub

	}

	@Override
	public void shuffle() {
		// TODO Auto-generated method stub

	}

	@Override
	public String deckToString() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<Integer, Deck> deal(int players, int numberOfCards) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		return null;
	}

}
