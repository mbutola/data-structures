package com.msb.lrg.ds.dp;

import java.util.Arrays;
import java.util.List;

public class ZeroOneKnapsackDp {

	public static void main(String[] args) {
		int[] val = new int[] {10,40,30,50};
		int[] wt = new int[] {5,4,6,3};
		int W = 10;
		System.out.println("O/P : " + ZeroOneKnapsackDp.knapSack(val, wt, W, wt.length));
	}
	
	public static String[] getArray(List<String> lis){
		String[] a = new String[lis.size()];
		for (int i = 0; i < lis.size(); i++) {
			a[i] = lis.get(i);
		}
		return a;
	}

	public static int knapSack(int[] val, int[] wt, int W, int n) {
		
		int dp[][] = new int[n+1][W+1];
		
		for (int i=0; i<=W; i++) {
			dp[0][i] = 0;
		}
		
		dp[0][0] = 0;
		for (int i=1; i<=n; i++) {
			dp[i][0] = val[i-1];
		}
		
		Utility.printDp(Utility.getList(wt), Utility.getList(W), dp);
		
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= W; j++) {
				if(wt[i-1] > j) {
					dp[i][j] = dp[i][j-1];
				}else {
					if(W-wt[i-1] >=0)
						dp[i][j] = Math.max(dp[i-1][j], val[i-1] + dp[i-1][W-wt[i-1]]);
				}
			}
		}
		
		return dp[n][W];
	}

}
