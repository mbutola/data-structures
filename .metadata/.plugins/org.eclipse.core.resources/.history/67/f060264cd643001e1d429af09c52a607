package com.msb.lrg.ds.dp;

import java.util.Arrays;
import java.util.List;

public class ZeroOneKnapsackDp {

	public static void main(String[] args) {
		int[] val = new int[] {10,40,30,50};
		int[] wt = new int[] {5,4,6,3};
		int W = 10;
		System.out.println("O/P : " + ZeroOneKnapsackDp.knapSack(val, wt, W, wt.length));
	}
	
	public static void printDp(List<String> s1, List<String> s2, int[][] memo) {
		String[] col = new String[s1.size()];
		col = s1.toArray(col);
		System.out.println(Arrays.toString(col));
		String[] row = new String[s2.size()];
		row = s2.toArray(row);
		System.out.println(Arrays.toString(row));
		System.out.println(row.length + " : " + col.length);
		for (int i = 0; i < memo[0].length; i++) {
			if(i == 0)
				System.out.printf("%8s", "");
			else
				System.out.printf("%2s  ", row[i-1]);
		}
		System.out.println("");
		for (int i = 0; i < memo.length; i++) {
			if(i == 0)
				System.out.printf("%4s", "");
			else
				System.out.printf("%2s  ", Integer.parseInt(col[i-1]));
			for (int j = 0; j < memo[0].length; j++) {
				System.out.printf("%2d  ", memo[i][j]);
			}
			System.out.println("");
		}
	}

	public static int knapSack(int[] val, int[] wt, int W, int n) {
		
		int dp[][] = new int[n+1][W+1];
		
		for (int i=0; i<=W; i++) {
			dp[0][i] = 0;
		}
		
		for (int i=0; i<=n; i++) {
			dp[i][0] = 0;
		}
		
		printDp(Utility.getArray(val), Utility.getArray(W), dp);
		
//		for (int i = 1; i <= n; i++) {
//			for (int j = 1; j <= W; j++) {
//				if(val[j-1] > i) {
//					dp[i][j] = dp[i][j-1];
//				}else {
//					if(W-wt[i-1] >=0)
//						dp[i][j] = Math.max(dp[i-1][j], 1+ dp[i-1][W-wt[i-1]]);
//				}
//			}
//		}
		
		return dp[n][W];
	}

}
