package com.msb.lrg.d;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Person {
	String name;
	Integer age;
	public Person(String name, Integer age) {
		super();
		this.name = name;
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Integer getAge() {
		return age;
	}
	public void setAge(Integer age) {
		this.age = age;
	}
	@Override
	public String toString() {
		return "Person [name=" + name + ", age=" + age + "]";
	}
}

public class MethodReferenceRunner {

	public static List<Person> getPersons(){
        
		List<Person> personList = new ArrayList<>();
        
        // Adding elements to above List
        // using add() method
        personList.add(new Person("vicky", 24));
        personList.add(new Person("poonam", 25));
        personList.add(new Person("sachin", 19));
        
        return personList;
	}

	public static int compareByName(Person p1, Person p2) {
		return p1.getName().compareTo(p2.getName());
	}
	
	public static int compareByAge(Person p1, Person p2) {
		return p1.getAge().compareTo(p2.getAge());
	}

	public int compareByNameInst(Person p1, Person p2) {
		return p1.getName().compareTo(p2.getName());
	}
	
	public int compareByAgeInst(Person p1, Person p2) {
		return p1.getAge().compareTo(p2.getAge());
	}

	public static void main(String[] args) {

		List<Person> persons = getPersons();
		
		persons.stream()
				.forEach(System.out::println);
		
		System.out.println("*** Using object method reference");
		System.out.println("*** sort by name");
		// sort by name
		MethodReferenceRunner comparator = new MethodReferenceRunner();
		Collections.sort(persons, comparator::compareByNameInst);
		persons.stream()
//					.map(p -> p.getName())
					.forEach(System.out::println);

		System.out.println("*** sort by age");
		// sort by age
		Collections.sort(persons, comparator::compareByAgeInst);
		persons.stream()
//					.map(p -> p.getName())
					.forEach(System.out::println);

		System.out.println("*** Using static method reference");
		System.out.println("*** sort by name");
		// sort by name
		Collections.sort(persons, MethodReferenceRunner::compareByName);;
		persons.stream()
//					.map(p -> p.getName())
					.forEach(System.out::println);

		System.out.println("*** sort by age");
		// sort by age
		Collections.sort(persons, MethodReferenceRunner::compareByAge);;
		persons.stream()
//					.map(p -> p.getName())
					.forEach(System.out::println);

		
		System.out.println("*** sort by name");
		// sort by name
		persons.stream()
					.sorted((p1,p2) -> p1.getName().compareTo(p2.getName()))
					.forEach(p -> System.out.println(p.getName()));

		System.out.println("*** sort by age");
		// sort by age
		persons.stream()
					.sorted((p1,p2) -> p1.getAge().compareTo(p2.getAge()))
					.forEach(p -> System.out.println(p.getName()));
		
		System.out.println("*** sort by name");
		// sort by age
		Collections.sort(persons, (p1,p2) -> p1.getName().compareTo(p2.getName()));;
		persons.stream()
//					.map(p -> p.getName())
					.forEach(System.out::println);

		System.out.println("*** sort by age");
		// sort by age
		Collections.sort(persons, (p1,p2) -> p1.getAge().compareTo(p2.getAge()));;
		persons.stream()
//					.map(p -> p.getName())
					.forEach(System.out::println);
	}

}
