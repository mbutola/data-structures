package com.msb.lrg.ds.dp;

public class MaxSumNonConsDp {

	public static void main(String[] args) {
		int[] items = new int[] {10,5,15,20};
		System.out.println("O/P : " + MaxSumNonConsDp.sum(items, items.length));
	}

	public static int sum(int[] items, int n) {
		
//		if(n == 0)
//			return items[0];
//		if(n == 1)
//			return Math.max(items[0],items[1]);
//		int res =  Math.max(sum(items, n-1),
//							items[n-1]) + sum(items, n-2) ;


		int[] dp = new int[n+1];
		dp[0] = items[0];
		dp[1] = Math.max(dp[0], dp[1]);
		
		for (int i = 2; i <= n; i++) {
			dp[i] = Math.max(dp[n-1], items[i-1] + dp[n-2]) ;			
		}
		return dp[n];
	}

}
